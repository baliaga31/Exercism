w
### Libraries
source("https://bioconductor.org/biocLite.R")
library(Rsamtools)
library(GenomicAlignments)
library(GenomicFeatures)
library(pasilla)
library(DESeq2)
library(ggplot2)
library(reshape)
library("airway")
data("airway")
se <- airway
se
assay(se)
ddsSE_dex <- DESeqDataSet(se, design = ~ cell + dex)
ddsSE
ddsSE_dex
keep <- rowSums(counts(ddsSE_dex)) >= 10
ddsSE_dex2 <- ddsSE_dex[keep,]
ddsSE_dex2
ddsSE_dex2$condition
colData(ddsSE_dex2)
ddsSE_dex2$condition <- relevel(ddsSE_dex2$condition, ref= "untreated")
ddsSE_dex2$condition <- relevel(ddsSE_dex2$condition, ref = "untreated")
ddsSE <- DESeqDataSet(se, design = ~ cell + dex)
ddsSE
keep <- rowSums(counts(dds)) >= 10
keep <- rowSums(counts(ddsSE)) >= 10
ddsSE <- ddsSE[keep,]
ddsSE
dds$condition <- relevel(dds$condition, ref = "untreated")
## Note on factor levels
dds$condition <- factor(dds$condition, levels = c("untreated","treated"))
dds$condition <- relevel(ddsSE$condition, ref = "untreated")
## Note on factor levels
dds$condition <- factor(ddsSE$condition, levels = c("untreated","treated"))
ddsSE$condition <- relevel(ddsSE$condition, ref = "untreated")
## Note on factor levels
ddsSE$condition <- factor(ddsSE$condition, levels = c("untreated","treated"))
ddsSE$condition <- relevel(ddsSE$condition, ref = "untreated")
library(airway)
dir <- system.file("extdata", package="airway", mustWork=TRUE)
csv.file <- file.path(dir, "sample_table.csv")
sample.table <- read.csv(csv.file, row.names=1)
bam.files <- file.path(dir, paste0(sample.table$Run, "_subset.bam"))
gtf.file <- file.path(dir, "Homo_sapiens.GRCh37.75_subset.gtf")
library(Rsamtools)
bam.list <- BamFileList(bam.files)
library(GenomicFeatures)
# for Bioc 3.0 use the commented out line
# txdb <- makeTranscriptDbFromGFF(gtf.file, format="gtf")
txdb1 <- makeTxDbFromGFF(gtf.file, format="gtf")
exons.by.gene <- exonsBy(txdb1, by="gene")
library(GenomicAlignments)
se <- summarizeOverlaps(exons.by.gene, bam.list,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=TRUE)
colData(se) <- DataFrame(sample.table)
library(Rsubread)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsubread", version = "3.8")
fc <- featureCounts(bam.files, annot.ext=gtf.file,
isGTFAnnotationFile=TRUE,
isPaired=TRUE)
library(Rsubread)
fc <- featureCounts(bam.files, annot.ext=gtf.file,
isGTFAnnotationFile=TRUE,
isPaired=TRUE)
names(fc)
unname(fc$counts) # hide the colnames
plot(assay(se)[,1],
fc$counts[match(rownames(se),rownames(fc$counts)),1])
fc
View(fc)
View(fc)
View(fc)
View(fc)
View(fc)
fc$counts
assay(se)[,1]
library(airway)
dir <- system.file("extdata", package="airway", mustWork=TRUE)
csv.file <- file.path(dir, "sample_table.csv")
sample.table <- read.csv(csv.file, row.names=1)
bam.files <- file.path(dir, paste0(sample.table$Run, "_subset.bam"))
gtf.file <- file.path(dir, "Homo_sapiens.GRCh37.75_subset.gtf")
library(Rsamtools)
bam.list <- BamFileList(bam.files)
library(GenomicFeatures)
# for Bioc 3.0 use the commented out line
# txdb <- makeTranscriptDbFromGFF(gtf.file, format="gtf")
txdb1 <- makeTxDbFromGFF(gtf.file, format="gtf")
exons.by.gene <- exonsBy(txdb1, by="gene")
library(GenomicAlignments)
se <- summarizeOverlaps(exons.by.gene, bam.list,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=TRUE)
se
colData(se) <- DataFrame(sample.table)
se
d
library(Rsubread)
fc <- featureCounts(bam.files, annot.ext=gtf.file,
isGTFAnnotationFile=TRUE,
isPaired=TRUE)
names(fc)
unname(fc$counts) # hide the colnames
plot(assay(se)[,1],
fc$counts[match(rownames(se),rownames(fc$counts)),1])
abline(0,1)
library(airway)
data(airway)
airway
rowRanges(airway)
head(assay(airway))
head(assay(se))
plot(assay(airway)[,1:2], cex=.1)
plot(assay(airway)[,2:3])
plot(assay(airway)[,2:3], cex = 0.1)
plot(assay(airway)[,1:4], cex = 0.1)
dds <- DESeqDataSet(airway, design= ~ cell + dex)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
colSums(counts(dds))
plot(sizeFactors(dds), colSums(counts(dds)))
abline(lm(colSums(counts(dds)) ~ sizeFactors(dds) + 0))
rld <- rlog(dds)
rld
plot(assay(rld)[,1:2], cex=.1)
plot(assay(rld)[,2:3]m cex = 0.1)
plot(assay(rld)[,2:3], cex = 0.1)
vsd <- varianceStabilizingTransformation(dds)
plot(assay(rld)[,1:2], cex=.1)
plot(assay(rld)[,1:2], cex=.1, main = "rlog")
plot(assay(vsd)[,1:2], cex=.1, main = "vsd")
meanSdPlot(assay(rld), ranks=FALSE)
library(vsn)
install.packages("vsn")
source('~/.active-rstudio-document')
library(vsn)
meanSdPlot(log.norm.counts, ranks=FALSE)
meanSdPlot(assay(rld), ranks=FALSE)
meanSdPlot(assay(vsd), ranks=FALSE)
plotPCA(rld, intgroup="dex")
plotPCA(vsd, intgroup="dex")
library(ggplot2)
(data <- plotPCA(rld, intgroup=c("dex","cell"), returnData=TRUE))
(percentVar <- 100*round(attr(data, "percentVar"),2))
makeLab <- function(x,pc) paste0("PC",pc,": ",x,"% variance")
ggplot(data, aes(PC1,PC2,col=dex,shape=cell)) + geom_point() +
xlab(makeLab(percentVar[1],1)) + ylab(makeLab(percentVar[2],2))
# In addition, we can plot a hierarchical clustering based on Euclidean distance matrix:
par(mfrow = c(2,1))
plot(hclust(dist(t(log.norm.counts))), labels = colData(dds)$dex)
plot(hclust(dist(t(assay(rld)))), labels = colData(rld)$dex)
plot(sizeFactors(dds), colSums(counts(dds)))
abline(lm(colSums(counts(dds)) ~ sizeFactors(dds) + 0))
plotMA(res, ylim=c(-4,4))
dds <- DESeqDataSet(airway, design= ~ cell + dex)
design(dds)
design(dds) <- ~ cell + dex
levels(dds$dex)
dds$dex <- relevel(dds$dex, "untrt")
levels(dds$dex)
dds <- DESeq(dds)
res <- results(dds)
head(res)
table(res$padj < 0.1)
summary(res)
res2 <- results(dds, alpha=0.05)
table(res2$padj < 0.05)
plotMA(res, ylim=c(-4,4))
dev.off()
plotMA(res, ylim=c(-4,4))
res.thr <- results(dds, lfcThreshold=1)
res.thr
plotMA(res.thr, ylim=c(-4,4))
hist(res$pvalue[res$baseMean > 1],
col="grey", border="white", xlab="", ylab="", main="")
resSort <- res[order(res$padj),]
head(resSort)
plotCounts(dds, gene=which.min(res$padj), intgroup="dex")
library(ggplot2)
data <- plotCounts(dds, gene=which.min(res$padj), intgroup=c("dex","cell"), returnData=TRUE)
ggplot(data, aes(x=dex, y=count, col=cell)) +
geom_point(position=position_jitter(width=.1,height=0)) +
scale_y_log10()
ggplot(data, aes(x=dex, y=count, col=cell, group=cell)) +
geom_point() + geom_line() + scale_y_log10()
library(pheatmap)
topgenes <- head(rownames(resSort),20)
mat <- assay(rld)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("dex","cell")])
pheatmap(mat, annotation_col=df)
install.packages("pheatmap")
library(pheatmap)
topgenes <- head(rownames(resSort),20)
mat <- assay(rld)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("dex","cell")])
pheatmap(mat, annotation_col=df)
library(org.Hs.eg.db)
results(dds, contrast=c("cell","N61311","N052611"))
library(sva)
BiocManager::install("sva", version = "3.8")
library(sva)
dat <- counts(dds, normalized=TRUE)
idx <- rowMeans(dat) > 1
dat <- dat[idx,]
mod <- model.matrix(~ dex, colData(dds))
mod0 <- model.matrix(~ 1, colData(dds))
svseq <- svaseq(dat, mod, mod0, n.sv=2)
dds.sva <- dds
dds.sva$SV1 <- svseq$sv[,1]
dds.sva$SV2 <- svseq$sv[,2]
design(dds.sva) <- ~ SV1 + SV2 + dex
dds.sva <- DESeq(dds.sva)
dat
idx
dat
mod
mod0
svseq
dds.sva
dds.sva$SV1
dds.sva$SV2
design(dds.sva)
dds.sva
library(Rsubread)
fc <- featureCounts(bam.files, annot.ext=gtf.file,
isGTFAnnotationFile=TRUE,
isPaired=TRUE)
names(fc)
unname(fc$counts) # hide the colnames
plot(assay(se)[,1],
fc$counts[match(rownames(se),rownames(fc$counts)),1])
abline(0,1)
library(airway)
data(airway)
airway
colData(airway)
rowRanges(airway)
head(assay(airway))
(
plot(assay(airway)[,1:2], cex=.1)
d
plot(assay(airway)[,1:2], cex=.1)
plot(assay(airway)[,c(1,3)], cex=.1)
library("airway")
library(airway)
data("airway")
airway
colData(airway)
rowRanges(airway)
head(assay(airway))
plot(assay(airway)[,1:2], cex=.1)
for x in assay(airway)[,x:x+1]:
plot(assay(airway)[,1:2], cex=.1)
for (x in assay(airway)[,x:x+1])
for (x in assay(airway)[,x])
fd
for (x in assay(airway)[,x])
plot(assay(airway)[,x:x+1], cex=.1)
factorielle <-1
for (i in seq(1, 10))
factorielle <- factorielle*i
factorielle
dim(airway)
for (x in assay(airway)[,1:*])
for (x in assay(airway)[,1:8])
plot(assay(airway)[,x:x+1], cex=.1)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
colSums(counts(dds))
plot(sizeFactors(dds), colSums(counts(dds)))
abline(lm(colSums(counts(dds)) ~ sizeFactors(dds) + 0))
rs <- rowSums(counts(dds))
par(mfrow=c(2,1))
boxplot(log2(counts(dds)[rs > 0,] + 1)) # not normalized
boxplot(log.norm.counts[rs > 0,]) # normalized
rs <- rowSums(counts(dds))
par(mfrow=c(2,1))
boxplot(log2(counts(dds)[rs > 0,] + 1)) # not normalized
boxplot(log.norm.counts[rs > 0,]) # normalized
log.norm <- normTransform(dds)
rs <- rowSums(counts(dds))
par(mfrow=c(2,1))
boxplot(log2(counts(dds)[rs > 0,] + 1)) # not normalized
boxplot(log.norm.counts[rs > 0,]) # normalized
log.norm.counts <- log2(counts(dds, normalized=TRUE) + 1)
log.norm.counts <- log2(counts(dds, normalized=TRUE) + 1)
log.norm <- normTransform(dds)
rs <- rowSums(counts(dds))
par(mfrow=c(2,1))
boxplot(log2(counts(dds)[rs > 0,] + 1)) # not normalized
rs <- rowSums(counts(dds))
par(mfrow=c(2,1))
boxplot(log2(counts(dds)[rs > 0,] + 1)) # not normalized
boxplot(log.norm.counts[rs > 0,]) # normalized
plot(sizeFactors(dds), colSums(counts(dds)))
dds <- estimateSizeFactors(dds)
library(DESeq2) # Normalize the sample for sequencing depth
dds <- DESeqDataSet(airway, design= ~ cell + dex)
dds
dds.fc <- DESeqDataSetFromMatrix(fc$counts,
colData=sample.table,
design=~ cell + dex)
dds <- estimateSizeFactors(dds)
dds
sizeFactors(dds)
colSums(counts(dds))
plot(sizeFactors(dds), colSums(counts(dds)))
abline(lm(colSums(counts(dds)) ~ sizeFactors(dds) + 0))
par(mfrow = c(3,1))
n <- 10000
brks <- 0:400
hist(rpois(n,lambda=100),
main="Poisson / NB, disp=0",xlab="",breaks=brks,col="black")
hist(rnbinom(n,mu=100,size=1/.01),
main="NB, disp = 0.01",xlab="",breaks=brks,col="black")
hist(rnbinom(n,mu=100,size=1/.1),
main="NB, disp = 0.1",xlab="",breaks=brks,col="black")
disp <- 0.5
mu <- 100
v <- mu + disp * mu^2
sqrt(v)/mu
sqrt(v - mu)/mu
sqrt(disp)
rs <- rowSums(counts(dds))
par(mfrow=c(2,1))
boxplot(log2(counts(dds)[rs > 0,] + 1)) # not normalized
boxplot(log.norm.counts[rs > 0,]) # normalized
rs
?Vignette
library(DESeq2)
?DESeq
?lm
?matrix
### BARCODES get a consensus sequence from multiple samples from mulitple volunteers
mydf <- as.data.frame(t(data.frame(c("Vol1","samp1", "a","t","c","g"), c("Vol1","samp2","a","a","c","c"), c("Vol1","samp3","a","t","c","c"), c("Vol2","samp1", "g","t","c","g"), c("Vol2","samp2", "g","t","c","g") ) ))
mydf
colnames(mydf) <- c("VolID","sample","snp1","snp2","snp3","snp4")
colnames(mydf)
rownames(mydf) <- c(1:5)
rownames(mydf)
mydf
# Here under I get a 'consensus sequence' based on the most common nucleotide for each SNP in all volunteers
Vol.ag <- aggregate(mydf[, 3:6], list(volunteer = mydf$VolID ), function(x) names(which.max(table(x))))
Vol.ag
class(Vol.ag)
# Make a 'for loop' for generating a dataframe with a blue/red colour for each snp, if it's identical/different from the consensus sequence
allsnp <- NULL # I am creating this empty dataframe that I will fill at each iteration of the loop
class(allsnp)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
getwd()
setwd("/Users/benoit/Exercism/r/hello-world")
list.dirs()
dir()
View(hello-world.R)
open(hello-world.R)
open("hello-world.R")
source(test_hello-world.R)
